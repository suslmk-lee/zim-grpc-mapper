apiVersion: v1
kind: ConfigMap
metadata:
  name: cloudnode-config
  namespace: iot-edge
data:
  # Server Configuration
  SERVER_HOST: "0.0.0.0"
  SERVER_PORT: "50051"
  # Transport Mode Configuration
  TRANSPORT_MODE: "grpc"  # 'grpc' or 'mqtt'
  # MQTT Configuration
  MQTT_BROKER: "211.188.58.158:1883"
  MQTT_TOPIC: "sensor/outbound"
  MQTT_CLIENT_ID: "cloud-subscriber"
  MQTT_USERNAME: ""
  MQTT_PASSWORD: ""
  MQTT_QOS: "1"
  # Database Configuration
  DB_HOST: "postgresql-cp.iot-db"
  DB_PORT: "5432"
  DB_NAME: "cp-db"
  DB_SSLMODE: "disable"

---
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyI0NGNlNzg5Yi1rcjEtcmVnaXN0cnkuY29udGFpbmVyLm5obmNsb3VkLmNvbS9jb250YWluZXItcGxhdGZvcm0tcmVnaXN0cnkiOnsidXNlcm5hbWUiOiJYQ0ExT2owRnFBOE9NaGFsT1VoSyIsInBhc3N3b3JkIjoiekdneG83WGxwazVvalk3diIsImF1dGgiOiJXRU5CTVU5cU1FWnhRVGhQVFdoaGJFOVZhRXM2ZWtkbmVHODNXR3h3YXpWdmFsazNkZz09In19fQ==
kind: Secret
metadata:
  name: ncr
  namespace: iot-edge
type: kubernetes.io/dockerconfigjson

---
apiVersion: v1
kind: Secret
metadata:
  name: db-credentials
  namespace: iot-edge
type: Opaque
data:
  DB_USER: YWRtaW4=  # echo -n 'admin' | base64
  DB_PASSWORD: bWFzdGVy  # echo -n 'master' | base64

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: db-init-scripts
  namespace: iot-edge
data:
  init.sql: |
    DO $$ 
    BEGIN
      CREATE TABLE IF NOT EXISTS iot_data (
        device VARCHAR(50),
        timestamp TIMESTAMP,
        pro_ver INT,
        minor_ver INT,
        sn BIGINT,
        model VARCHAR(50),
        tyield FLOAT,
        dyield FLOAT,
        pf FLOAT,
        pmax FLOAT,
        pac FLOAT,
        sac FLOAT,
        uab FLOAT,
        ubc FLOAT,
        uca FLOAT,
        ia FLOAT,
        ib FLOAT,
        ic FLOAT,
        freq FLOAT,
        tmod FLOAT,
        tamb FLOAT,
        mode VARCHAR(20),
        qac INT,
        bus_capacitance FLOAT,
        ac_capacitance FLOAT,
        pdc FLOAT,
        pmax_lim FLOAT,
        smax_lim FLOAT,
        is_sent BOOLEAN,
        reg_timestamp TIMESTAMP DEFAULT (CURRENT_TIMESTAMP AT TIME ZONE 'Asia/Seoul')
      );
    EXCEPTION
      WHEN duplicate_table THEN
        NULL;
    END $$;

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudnode
  namespace: iot-edge
  labels:
    app: cloudnode
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cloudnode
  template:
    metadata:
      labels:
        app: cloudnode
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/node-role
                    operator: NotIn
                    values:
                      - "edge"
      initContainers:
      - name: init-db
        image: postgres:15
        command: ['sh', '-c']
        args:
          - |
            PGPASSWORD=$DB_PASSWORD psql -h $DB_HOST -U $DB_USER -d $DB_NAME -f /docker-entrypoint-initdb.d/init.sql
        envFrom:
        - configMapRef:
            name: cloudnode-config
        - secretRef:
            name: db-credentials
        volumeMounts:
          - name: init-script
            mountPath: /docker-entrypoint-initdb.d
      containers:
      - name: cloudnode
        image: 44ce789b-kr1-registry.container.nhncloud.com/container-platform-registry/cloudnode:latest
        imagePullPolicy: Always
        ports:
          - containerPort: 50051
        env:
          - name: PROFILE
            value: "prod"
        envFrom:
        - configMapRef:
            name: cloudnode-config
        - secretRef:
            name: db-credentials
      volumes:
        - name: init-script
          configMap:
            name: db-init-scripts
      imagePullSecrets:
      - name: ncr

---
apiVersion: v1
kind: Service
metadata:
  name: cloudcore
  namespace: iot-edge
  labels:
    app: cloudnode
spec:
  selector:
    app: cloudnode
  ports:
    - name: grpc
      protocol: TCP
      port: 50051
      targetPort: 50051
      nodePort: 31151
  type: NodePort
